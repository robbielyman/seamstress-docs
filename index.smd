---
.title = "Seamstress",
.date = @date("2024-10-10T10:04:00-04:00"),
.author = "Robbie Lyman",
.layout = "project.shtml",
.draft = false,
---

[]($section.id("summary"))

Seamstress is an “art engine”
and batteries-included Lua environment
for music, games, visuals and creative coding.
It is written in [Lua]($link.url("https://lua.org")) and [Zig]($link.url("https://ziglang.org")),
and inspired by
[monome]($link.url("https://monome.org")) [norns]($link.url("https://github.com/monome/norns")),
[Love2D]($link.url("https://love2d.org/")),
[Hydra]($link.url("https://hydra.ojack.xyz/")) and [Node.js]($link.url("https://nodejs.org/")).
Seamstress is unstable software.

[]($section.id("remainder"))

# Demos

[Mitchell Hashimoto]($link.url("https://mitchellh.com/")) has a great blog post on large projects,
which I'll quote a little of:

> I've learned that when I break down my large tasks in chunks that result in seeing tangible forward progress,
> I tend to finish my work and retain my excitement throughout the project.
> People are all motivated and driven in different ways, so this may not work for you,
> but as a broad generalization I've not found an engineer who doesn't get excited by a good demo.
> And the goal is to always give yourself a good demo.

—[“My Approach to Building Large Technical Projects”]($link.url("https://mitchellh.com/writing/building-large-technical-projects"))

His approach resonates with how I’ve been most successful when working on Seamstress.
I plan to collect documentation of the demos I produce in its development here.
If you make something cool and “demo-y” with Seamstress and would like it to live here,
let me know; I’d love to feature stuff you make!

## Plasma

[“A plasma is a sort of noise function”](https://demobasics.pixienop.net/tweetcarts/basics#plasmas),
says this website.
My introduction to plasmas is due to
[Brian Crabtree]($link.url("https://nnnnnnnn.co")),
who created [Plasma]($link.url("https://llllllll.co/t/plasma/64038")),
a [norns]($link.url("https://monome.org/")) [script]($link.url("https://github.com/tehn/plasma")).
It uses the [monome grid]($link.rule("https://monome.org")) as a canvas for the animation,
which is procedurally derived from a short function.
Changing the parameters (or the function itself) is part of the fun.

[]($image.asset("plasma.gif"))

[Plasma for Seamstress]($link.page('code/seamstress/demos/plasma')).
I talk through the short demo script and a bit about the design of Seamstress’s
interaction with monome devices.

# Installation

## Homebrew

I provide a [Homebrew]($link.url("https://brew.sh")) formula for Seamstress.
To install via Homebrew,
run the following commands.

```sh
brew tap robbielyman/seamstress
brew install seamstress
```

## Building from source

To build from source, you’ll need the [Zig]($link.url("https://ziglang.org")) compiler.
Seamstress will always track releases of the Zig compiler,
so be sure to grab the latest release, rather than the master build.
To compile Seamstress, clone [the repository]($link.url("https://github.com/robbielyman/seamstress"))
and run `zig build` in the repository root.
(NB: you’ll need an internet connection so that the Zig build system can fetch dependencies.)

Doing so will place the compiled executable in `./zig-out/bin`.
You can add this folder to your `$PATH` to make `seamstress` available from your shell,
symlink it somewhere on your `$PATH`,
or copy the files installed into `zig-out` somewhere in your `$PATH`.
By default you must preserve the relative file structure present inside `zig-out`
so that the `seamstress` executable can find the Lua files it relies on.
(This behavior can be overridden.)

I develop Seamstress primarily on macOS.
It is a design goal for Seamstress to be cross-platform,
but it is not a primary focus for me writing on my own.
If you are able to attempt to compile and run Seamstress on other platforms,
I’m happy to try and work with you to get it working!

(If you are interested in packaging Seamstress for Linux, for example,
I’d love to support that effort.)

### Dependencies

Aside from the Zig compiler,
Seamstress depends on a number of Zig projects,
as well as some C libraries.

#### Zig dependencies

This section is informational;
these dependencies are fetched by the Zig build system
when compiling Seamstress from source and do not need to be installed separately.

- [libxev]($link.url("https://github.com/mitchellh/libxev")), a cross-platform event loop inspierd by `io_uring`.
- [ziglua]($link.url("https://github.com/natecraddock/ziglua")), Zig bindings for the Lua C API.
- [zosc]($link.url("https://github.com/robbielyman/zosc")), an [OSC]($link.url("https://opensoundcontrol.stanford.edu")) library for Zig.

#### C dependencies

These dependencies must be present on your system in order to use seamstress.
The Homebrew formula automates the installation of these dependencies,
but building from source may or may not.

- [liblua]($link.url("https://lua.org")), the language, is implemented as a C library.

When building from source, `ziglua` will by default fetch and statically link against `liblua`.
When using Seamstress as a Lua library,
it is probably best practice to instead link to your system’s copy of Lua.

#### Optional dependencies

Although not necessary for all operations of Seamstress,
certain functionality may not work as expected if a dependency listed here is not present.
- [LuaRocks]($link.url("https://luarocks.org/")) (in particular [busted]($link.url("https://luarocks.org/modules/lunarmodules/busted")))
is required for running the Lua unit tests.
Additionally, the Seamstress Lua environment can require LuaRocks modules.
- [lua-language-server]($link.url("https://github.com/LuaLS/lua-language-server")) in a text editor that supports the language server protocol,
is not necessary for writing Seamstress programs,
but will provide documentation, completion, etc.

# Documentation

## Using Seamstress standalone

Seamstress may be invoked from the command line as `seamstress test|[filename]`,
where `filename` is an optional argument naming the “root” Lua file of the desired script,
i.e. `seamstress script`
In the case of `seamstress test`,
Seamstress will attempt to run a suite of unit tests
using the [busted]($link.url("https://luarocks.org/modules/lunarmodules/busted")) testing framework and exit.
Notice that although if busted (or LuaRocks) is not installed,
these tests will not be run,
it is not necessary to install LuaRocks or busted to run seamstress.

Running Seamstress in this way opens an instance of Lua,
runs `seamstress = require 'seamstress'` and a few other convenience functions,
like setting up `seamstress.repl` and `seamstress.cli`,
and in the case that `filename` is provided,
the scripts file is evaluated.
Once that is done, the event loop is started, and an `init` event is posted.
Under standalone operation,
`seamstress` will exit when the event loop has nothing left to do.
Usually the REPL along with other background processes will keep
the event loop occupied until the user signals their intention to quit.

## Using Seamstress as a Lua library

Seamstress also ships with a `seamstress.so` library
for use as a Lua library,
for example with your system’s `lua` interpreter.
Under this operation,
one loads Seamstress by calling `require 'seamstress'`.
To start the event loop,
supposing `seamstress = require 'seamstress'`,
call `seamstress:run()` or `seamstress:resume()`.
The former will not return until the event loop has finished,
so all further Lua code execution will be triggered by the event loop.
By contrast, `seamstress:resume()` will just run Seamstress
for one “tick” (i.e. queued operation) completes
before yielding control back to the calling function.

The two modes of operation should be roughly similar
in terms of current capabilities.
I intend to focus development primarily on the standalone experience at first,
but using Seamstress as a Lua library is a first-class design goal.

## Environment variables

Seamstress pays attention to the state of the following environment variables at startup
- `$SEAMSTRESS_LUA_PATH`, which defaults to navigating to the path `../share/seamstress/lua`
relative to the location of the seamstress executable,
is used to find (or override) the Lua code that seamstress ships with.

Additionally, when `luarocks` is available,
Seamstress alters for itself the value of the following environment variables,
replacing them with the output of `luarocks path`.
- `$LUA_PATH`
- `$LUA_CPATH`
- `$PATH`

## Modules

For brevity, although Seamstress follows the convention
of not adding anything beyond the `seamstress` table to the current scope,
when writing pseudocode for function calls,
I will drop the leading `seamstress`.
For example, I might act as though I have run the line
`event = require 'seamstress.event'`.

### `seamstress.event`

Not to be confused with the event loop,
Seamstress includes a “pub/sub” event system,
similar in design to the LuaRocks project [mediator]($link.url("https://github.com/Olivine-Labs/mediator_lua")).
This system is available as the `event` field on the `seamstress` table
and as `require 'seamstress.event'`.

This system is thoroughly integrated into Seamstress’s module system;
many modules default to posting an event when they wish to make changes
to the environment available to the running program.

#### Channels

A `Channel` is a Lua table which holds a table of sub-channels and callbacks
(really `Subscriber` objects).
Channels can be retrieved by calling `event.get(namespace)`,
where `namespace` is an array of strings representing the namespace of the channel.

#### Namespaces and callbacks

Channels and their callbacks are “namespaced” by using an array of strings,
`{ "like", "this" }`,
with handlers for more general namespaces being called after more qualified handlers.
In `lua-ls` notation,
each handler callback is a Lua function that should have “signature”
`fun(event: string[], …): boolean, any?`.
That is, an event handler callback takes as arguments the (fully qualified)
namespace for the event,
followed by any arguments passed after the event to `event.publish`.
The function should **always** return either `true` or `false`
and **may** optionally return another value.
The optional values are collected into an array
which is returned by the `event.publish` call.
The boolean indicates whether other handlers should be called after this one;
`true` for yes and `false` for no.

#### Subscribers

A `Subscriber` is a Lua table holding a callback function and some options.
Subscribers are created (and registered to a namespace)
with the `event.addSubscriber(namespace, fn, options)` function.
Here `namespace` is an array of strings,
and `options` is an optional table,
with two meaningful entries: `priority` and `predicate`.
If `priority` is a non-nil positive integer,
it represents the order in which the callback should be called;
`1` for first, `2` for second, and so on.
A priority of `0` will be evaluated **last.**
If `predicate` is a non-nil function,
it will be evaluated with the arguments to `event.publish`
and the callback will be skipped if `predicate` does not return a truthy value.
As mentioned above, `fn` should be a function of “signature”
`fun(event: string[], …): boolean, any?`.

Calls to `event.addSubscriber` will return the created `Subscriber` table;
they can also be retrieved by calling `event.getSubscriber`
with the value of `subscriber.id`,
and can be removed with `event.removeSubscriber`.

#### Publishing an event

When calling `event.publish(namespace, …)‘,
each of the callback functions registered at the given namespace
is called in order of priority.
As mentioned above, each function should have “signature”
`fun(event: string[], …): boolean, any?`.
If the first return value is falsey,
subsequent callbacks are not called and `event.publish` returns.
Any subequent return values are coalesced into a list, which is returned
when `event.publish` finishes.

Consider a call to `event.publish({ "nested", "namespace" })`.
If all of the callbacks registered at `{ "nested", "namespace" }` return truthy values,
the call to `publish` continues by calling callbacks registered at `{ "nested" }`
(and finally at the “root” namespace `{}`).

### `seamstress.async`

Seamstress provides JavaScript-style asynchronous code execution
via `require 'seamstress.async'` and `require 'seamstress.async.Promise'`.
Like the pub/sub event system,
these modules are also automatically available as
`seamstress.async` and `seamstress.async.Promise`.

#### Promises

A `Promise` is an opaque handle to a unit of code execution
which is driven by the Seamstress event loop.
Like many Seamstress object types,
one creates `Promise` objects by calling `async.Promise` as a function.
This function takes at least one argument, which should be a function.
Any further arguments are passed to this function as its arguments.
Under the hood,
this function is executed on a separate Lua [coroutine]($link.url("https://www.lua.org/manual/5.4/manual.html#2.6")),
and so can call `coroutine.yield`.

As in JavaScript, functions passed to `async.Promise` always execute
and have no builtin cancelation mechanism.
Every time a `Promise` function yields,
the event loop schedules an event which will resume the function’s execution
until it returns or errors.

Therefore a `Promise` is in one of three states:
it is either mid-execution, in which case it is “pending”,
or it has “settled”, either successfully, in which case we say
the Promise is “resolved”, or there was an error,
in which case the Promise is “rejected”.
To sequence code to execute after a Promise has settled,
call its `anon` method.

#### `Promise:anon`

`Promise:anon(resolve, reject)` takes one (optionally two) functions as arguments.
The first, `resolve`, will be called if the Promise resolves,
and receives any values returned by the given Promise as arguments.
The second, `reject`, defaults to `function(err) error(err) end`
and will be called if the Promise rejects with error message `err`.
`Promise:anon` returns a new Promise,
which settles once the inital Promise has settled.
Note that this new Promise will _resolve_ in all cases unless the `resolve` or `reject`
handler itself throws an error.

#### `Promise:catch` and `Promise:finally`
There are two convenience methods,
`catch` and `finally` provided.
`Promise:catch(reject)` is equivalent to `Promise:anon(resolve, reject)`
with `resolve = function(…) return … end`,
while `Promise:finally(handler)` is equivalent to `Promise:anon(handler, handler)`.

#### `Promise.any`, `Promise.all` and `Promise.race`
These functions (which are called as `async.Promise.all`,
for example, and not as methods on a Promise object)
provide a convenient method for many-to-one transformations on Promises.
Each one takes in a variable number of Promises as arguments
and returns a new Promise
whose settling is dependent on the settling of the arguments passed in.
`Promise.all` for instance,
will resolve once all of its arguments resolve,
but will reject if any of them reject.
`Promise.any` resolves if any of its arguments resolve,
and rejects only once all of them reject.
`Promise.race` settles in the same way as the first of its arguments to settle.
Note that `Promise.race`, for instance,
does not cancel execution of any of its arguments,
even though it may settle faster than some of them.

#### `async` functions

Similar to `async.Promise`, the `async` table is also callable,
taking in a function as an argument.
Unlike `async.Promise`,
calling `async` returns a _function,_
which returns a `Promise` when called.
For example, consider the following code

```lua
local fn = seamstress.async(function(x) return x + 2 end)
local promise = fn(5)
promise:anon(function(x) print("received " ... x) end)
-- prints "received 7"
```

That is, every invocation of `fn`
will return a new Promise
which corresponds to a new asynchronous invocation of the function.
This Promise may be chained like any other.

#### `Promise:await`

When in an asynchronous context, like within a Promise,
one may use `Promise:await` as a convenient way of “unwrapping” Promise objects
to get the values they return.
For example, consider the following code

```lua
local fn = seamstress.async(function(x) return x + 2 end)
local promise = seamstress.async.Promise(function()
  local y = fn(5):await()
  print("received " .. y)
  -- prints "received 7"
end)
```

In this code, `fn(5):await()`
creates a new Promise object and invokes its `await()` method.
This method repeatedly yields the current coroutine
(hence must be called from within an asynchronous context like a coroutine)
until the Promise settles.
If the Promise resolves,
any values returned by the Promise
are themselves returned by the call to `await()`.
If the Promise rejects,
an error is thrown.
Thus the above code is functionally identical—but perhaps easier to read than—the following code

```lua
local fn = seamstress.async(function(x) return x + 2 end)
local promise = seamstress.async.Promise(function()
  local p = fn(5)
  p:anon(function(y)
    print("received " .. y)
  end, function(err) error(err) end)
end)
```

### `seamstress.Timer`

Like the `seamstress.async` and `seamstress.async.Promise` functions,
`seamstress.Timer(action, delta, stage_end, stage, running)`
allows for execution of code via the event loop.
While `Promise` objects are coroutine-based,
`Timer` objects instead call their functions repeatedly
at an (ideal) delay of `delta` seconds.
All of the arguments to `Timer` are optional except for the first, `action`,
and all are available as fields on the returned `Timer`.
The `action` parameter is a function,
which is called with two arguments: the `Timer` object and `dt`,
the actual elapsed time in seconds since the Timer was last triggered.
In addition to `delta` in seconds,
one may set `stage_end` to a positive integer to signal when the Timer should stop
(a negative number means repeat infinitely)
`stage` to set the current stage,
and `running` to start or stop the Timer.

All of these fields may be modified from within `action`,
allowing Timers to respond dynamically to their environment.
